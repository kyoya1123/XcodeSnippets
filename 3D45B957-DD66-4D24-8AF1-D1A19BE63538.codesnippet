<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>variableBlurView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import SwiftUI
import UIKit
import CoreImage.CIFilterBuiltins


public enum BlurDirection {
    case topToBottom
    case bottomToTop
    case leftToRight
    case rightToLeft
    
    func points(size: CGFloat) -&gt; (CGPoint, CGPoint) {
        switch self {
        case .topToBottom:
            (CGPoint(x: 0, y: size), CGPoint(x: 0, y: 0))
        case .bottomToTop:
            (CGPoint(x: 0, y: 0), CGPoint(x: 0, y: size))
        case .leftToRight:
            (CGPoint(x: 0, y: 0), CGPoint(x: size, y: 0))
        case .rightToLeft:
            (CGPoint(x: size, y: 0), CGPoint(x: 0, y: 0))
        }
    }
}

public enum GradientType {
    case linear
    case smooth
    
    func makeGradientImage(direction: BlurDirection) -&gt; CGImage {
        let size: CGFloat = 100
        let outputImage: CIImage = {
            let points = direction.points(size: size)
            switch self {
            case .linear:
                let filter = CIFilter.linearGradient()
                filter.color0 = CIColor.black
                filter.color1 = CIColor.clear
                filter.point0 = points.0
                filter.point1 = points.1
                return filter.outputImage!
            case .smooth:
                let filter =  CIFilter.smoothLinearGradient()
                filter.color0 = CIColor.black
                filter.color1 = CIColor.clear
                filter.point0 = points.0
                filter.point1 = points.1
                return filter.outputImage!
            }
        }()
        
        return CIContext().createCGImage(outputImage, from: CGRect(origin: .zero, size: CGSize(width: size, height: size)))!
    }
}

public struct VariableBlurView: UIViewRepresentable {
    
    public var maxBlurRadius: CGFloat = 20
    
    public var gradientType: GradientType = .linear
    
    public var direction: BlurDirection = .topToBottom
    
    public func makeUIView(context: Context) -&gt; VariableBlurUIView {
        VariableBlurUIView(maxBlurRadius: maxBlurRadius, gradientType: gradientType,  direction: direction)
    }
    
    public func updateUIView(_ uiView: VariableBlurUIView, context: Context) {
    }
}

/// credit https://github.com/jtrivedi/VariableBlurView
open class VariableBlurUIView: UIVisualEffectView {
    
    public init(maxBlurRadius: CGFloat = 20, gradientType: GradientType = .linear, direction: BlurDirection = .topToBottom) {
        super.init(effect: UIBlurEffect(style: .regular))

        // `CAFilter` is a private QuartzCore class that we dynamically declare in `CAFilter.h`.
        //             let variableBlur = CAFilter.filter(withType: "variableBlur") as! NSObject
        
        // Same but no need for `CAFilter.h`.
        let CAFilter = NSClassFromString("CAFilter")! as! NSObject.Type
        let variableBlur = CAFilter.self.perform(NSSelectorFromString("filterWithType:"), with: "variableBlur").takeRetainedValue() as! NSObject

        // The blur radius at each pixel depends on the alpha value of the corresponding pixel in the gradient mask.
        // An alpha of 1 results in the max blur radius, while an alpha of 0 is completely unblurred.
        let gradientImage = gradientType.makeGradientImage(direction: direction)
        
        variableBlur.setValue(maxBlurRadius, forKey: "inputRadius")
        variableBlur.setValue(gradientImage, forKey: "inputMaskImage")
        variableBlur.setValue(true, forKey: "inputNormalizeEdges")
        
        // We use a `UIVisualEffectView` here purely to get access to its `CABackdropLayer`,
        // which is able to apply various, real-time CAFilters onto the views underneath.
        let backdropLayer = subviews.first?.layer
        
        // Replace the standard filters (i.e. `gaussianBlur`, `colorSaturate`, etc.) with only the variableBlur.
        backdropLayer?.filters = [variableBlur]
        
        // Get rid of the visual effect view's dimming/tint view, so we don't see a hard line.
        for subview in subviews.dropFirst() {
            subview.alpha = 0
        }
    }
    
    required public init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    open override func didMoveToWindow() {
        // fixes visible pixelization at unblurred edge (https://github.com/nikstar/VariableBlur/issues/1)
        guard let window, let backdropLayer = subviews.first?.layer else { return }
        backdropLayer.setValue(window.screen.scale, forKey: "scale")
    }
    
    open override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        // `super.traitCollectionDidChange(previousTraitCollection)` crashes the app
    }
}

#Preview {
    ScrollView {
        Image(systemName: "paintpalette.fill")
            .resizable()
            .aspectRatio(contentMode: .fit)
            .symbolRenderingMode(.multicolor)
    }
    .overlay {
            VStack {
                VariableBlurView(
                    maxBlurRadius: 20,
                    gradientType: .smooth,
                    direction: .topToBottom
                )
                .frame(height: 200)
                Spacer()
            }
        .allowsHitTesting(false)
    }
    .ignoresSafeArea()
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>3D45B957-DD66-4D24-8AF1-D1A19BE63538</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>VariableBlurView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
